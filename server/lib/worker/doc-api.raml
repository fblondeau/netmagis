#%RAML 1.0
title: Netmagis API
version: v0.1
# baseUri: https://....
# securitySchemes:
mediaType: application/json
protocols: HTTPS
documentation: http://netmagis.org/???

##############################################################################
# Schema (types)
##############################################################################

types:
  ErrorReport
    description: RFC7807 based error report (see 3.1)
    type: object
    properties:
      type:		string
      title: 		string
      status:		integer
      detail:		string
      instance:		string
      
  Session:
    description: base type used to define active/expired sessions
    type: object
    properties:
      active:		integer
      api:		integer
      token:		string
      start:		datetime
      ip:		inet
  ActiveSession:
    type: Session
    properties:
      casticket:	string
      lastaccess:	datetime
  ExpiredSession:
    type: Session
    properties:
      stop:		datetime
      stopreason:
	enum:		[ logout, expired ]

  Capability:
    description: user capabilities
    type: object
    properties:
      user:		string
      lang:		string
      cap:		string []
    example: |
      {
	user: "pda"
	lang: "fr"
	cap: ["any", "logged", "admin", "topo"]
      }

  AllowedDomain:
    description: a domain allowed for our group
    type: object
    properties:
      iddom:		integer
      name:		string
    example: |
      {
	iddom:	5,
	name:	example.org
      }

  DHCPRange:
    description: base type (without id) to defined AllowedDHCPRange
    type: object
    properties:
      min:		inet
      max:		inet
      iddom:		integer
      default_lease_time: integer
      max_lease_time:	integer
      iddhcpprof:	integer | -1
    example: |
      {
	iddhcprange: 1
	min: 198.51.100.10
	max: 198.51.100.20
	iddom: 2
	default_lease_time: null
	max_lease_time: 3600
	iddhcpprof: 3
      }
  AllowedDHCPRange:		# DHCPRange + id
    description: a DHCP range in a network/domain allowed for our group
    type: DHCPRange
    properties:
      iddhcprange:	integer
      domain:		string
      dhcpprofile:	string
      editable:		bool
    example:
      {
	iddhcprange: 1
	min: 198.51.100.10
	max: 198.51.100.20
	iddom: 2
	domain: example.com
	default_lease_time: null
	max_lease_time: 3600
	iddhcpprof: 3
	dhcpprofile: "x terminal"
	editable: True
      }

  AllowedDHCPProfile:
    description: a DHCP profile allowed for our group
    type: object
    properties:
      iddhcpprof:	integer
      name:		string
    example: |
      {
	iddhcpprof: 5,
	name: "x terminal"
      }

  AllowedView:
    description: a view allowed for our group
    type: object
    properties:
      idview:		integer
      name:		string
      selected:		integer
    example: |
      {
	idview:		2
	name:		internal
	selected:	1
      }

  AllowedNetwork:
    description: a network allowed for our group
    type: object
    properties:
      name:		string
      location:		string
      addr4:		inet
      addr6:		inet
      organizaton:	string
      community:	string
      comment:		string
      dhcp:		integer
      gw4:		inet
      gw6:		inet
    example: |
      {
	name:		"my network"
	location:	"Bldg A"
	addr4:		198.51.100.0/24
	addr6:		2001:db8:1234:5678::/64
	organization:	"Example Inc."
	community:	"servers"
	comment:	"an example network fom example Inc."
	dhcp:		0
	gw4:		198.51.100.254
	gw6:		2001:db8:1234:5678::1
      }

  ShortHost:
    description: minimal description of a single host
    type: object
    properties:
      idhost:		integer
      name:		string
      iddom:		integer
      domain:		string
      idview:		integer
      view:		string
    example: |
      {
	idhost: 123,
	name: www,
	iddom: 1,
	domain: example.org,
	idview: 1,
	view: internal
      }
  FullHost:
    description: complete description of a single host without idrr
    type: object
    properties:
      name:		string
      iddom:		integer
      idview:		integer
      mac:		macaddr			# required. Use '' for no mac
      idhinfo:		integer			# required
      iddhcpprof:	integer			# required. -1 if no profile
      comment:		string
      respname:		string
      respmail:		string
      sendsmtp:					# required
	enum: [0, 1]
      ttl:		integer			# required. Use -1 for default
      addr:		inet []
    example: |
      {
	name: jupiter,
	iddom: 1,
	idview: 1,
	mac: "01:02:03:04:05:06",
	idhinfo: 0,
	iddhcpprof: -1,
	comment: "Bill's laptop",
	respname: "Bill",
	respmail: bill@example.org,
	sendsmtp: 0,
	ttl: -1,
	addr: [ 198.51.100.2, 2001:db8:1234::2 ],
      }

  AliasMod:
    description: description of modifiable alias fields (for put method)
    type: object
    properties:
      ttl:		integer			# required. Use -1 for default
      idhost:		integer
    example: |
      {
	ttl: -1,
	idhost: 123,
      }
  AliasWithName:
    description: description of a single alias for post/get methods
    type: AliasMod
    properties:
      name:		string
      iddom:		integer
      idview:		integer
    example: |
      {
	name: www,
	iddom: 1,
	idview: 1,
	ttl: -1,
	idhost: 123,
      }
  AliasWithNameId
    description: description of a single alias in a collection
    type: AliasWithName
    properties:
      idalias:		integer
    example: |
      {
	idalias: 456,
	name: www,
	iddom: 1,
	idview: 1,
	ttl: -1,
	idhost: 123,
      }

  MailroleHost:
    description: description of modifiable mail role fields (for put method)
    type: object
    properties:
      ttl:		integer			# required. Use -1 for default
      idhost:		integer
    example: |
      {
	ttl: -1,
	idhost: 123,
      }
  MailroleWithName:
    description: description of a single mail role for post/get methods
    type: MailroleHost
    properties:
      name:		string
      iddom:		integer
      idview:		integer
    example: |
      {
	name: www,
	iddom: 1,
	idview: 1,
	ttl: -1,
	idhost: 123,
      }
  MailroleWithNameId
    description: description of a single mail role in a collection
    type: MailroleWithName
    properties:
      idmailrole:	integer
    example: |
      {
	idmailrole: 456,
	name: www,
	iddom: 1,
	idview: 1,
	ttl: -1,
	idhost: 123,
      }

  MXHost:
    description: description of single MX target host
    type: object
    properties:
      ttl:		integer			# required. Use -1 for default
      prio:		integer			# required. No  default
      idhost:		integer
    example: |
      {
	ttl: -1,
	prio: 100,
	idhost: 123,
      }
  MXWithName:
    description: description of a single MX for post/get methods
    type: object
    properties:
      name:		string
      iddom:		integer
      idview:		integer
      mxhosts:		MXHost []
    example: |
      {
	name: marketing,
	iddom: 2,
	idview: 2,
	mxhosts: [
	  {
	    prio: 100
	    ttl: -1,
	    idhost: 345,
	  },
	]
      }
  MXWithNameId:
    description: description of a single mail role in a collection
    type: MXWithName
    properties:
      idmx:		integer
    example: |
      {
	idmx: 456,
	name: sales,
	iddom: 1,
	idview: 1,
	mxhosts: [
	  {
	    prio: 100
	    ttl: -1,
	    idhost: 123,
	  },
	  {
	    prio: 200
	    ttl: -1,
	    idhost: 124,
	  }
	]
      }

  Relaydom:
    description: description of mail relays for a domain and a view
    type: object
    properties:
      iddom:		integer
      idview:		integer
      relays:		MXHost []
    example: |
      {
	iddom: 3,
	idview: 1,
	relays: [
	  {
	    prio: 100,
	    ttl: -1,
	    idhost: 123,
	  },
	  {
	    prio: 200,
	    ttl: -1,
	    idhost: 124,
	  }
	]
      }

  SearchResult:
    description: search result item
    type: object
    properties:
      result:		string
      type:
	enum: [ "domain", "name"                      ]
      link:		string
	example:	"/names/23"
    example: |
      {
	result:		"a string containing the query string",
	type:		"network",
	link:		"/networks/123"
      }

  ZoneParam:
    description: description of a zone
    type: object
    properties:
      name:		string
      idview:		integer
      gen:
	enum: [0, 1]
      counter:		integer
    example: |
      {
	name: "example.com.internal",
	idview: 5,
	gen: 0,
	counter: 123
      }

  ZoneGen:
    description: identify a generated zone
    type: object
    properties:
      name:		string
      counter:		integer
    example: |
      {
	name: "example.com.internal",
	counter: 123
      }

  ZoneContent:
    description: content of a zone
    type: object
    properties:
      prologue:		string
      rrsup:		string
      records:		ZoneRecord []
      counter:		integer
    example: |
      {
	prologue: "@ SOA .... \n ..."
	rrsup: "%NAME% IN MX 100 mx1.example.com.\n%NAME% IN MX 200 ..."
	records: [
	  {
	    name: "foo",
	    ttl: 60,
	    type: "A",
	    rdata: "198.51.100.1"
	  },
	  {
	    name: "foo",
	    ttl: -1,
	    type: "MX",
	    rdata: "100 mx1.example.com"
	  }
	],
	counter: 123
      }

    ZoneRecord:
      description: an individual RR
      type: object
      properties:
	name:		string			# relative to the zone
	ttl:		integer			# or -1 if no ttl
	type:		string			# A, AAAA, MX, etc.
	rdata:		string			# dependant upon type
      example: |
	{
	  name: "foo",
	  ttl: 60,
	  type: "MX",
	  rdata: "100 mx1.example.com"
	}

  DHCPParam:
    description: description of a view for DHCP generation
    type: object
    properties:
      name:		string
      gen:
	enum: [0, 1]
      counter:		integer
    example: |
      {
	name: "com.internal",
	gen: 0,
	counter: 123
      }

  DHCPGen:
    description: identify a generated view
    type: object
    properties:
      name:		string
      counter:		integer
    example: |
      {
	name: "internal",
	counter: 123
      }

  DHCPProfile:
    description: content of a DHCP profile
    type: object
    properties:
      name:		string
      text:		string
    example: |
      {
	name:	"foo"
	text:	"some ISC DHCP directives;"
      }

  DHCPRange;
    description: content of a DHCP dynamic range
    type: object
    properties:
      network:		cidr
      domain:		string
      min:		inet
      max:		inet
      default_lease_time:	integer
      max_lease_time:		integer
      profile:		string | null
    example: |
      {
	network:		"198.51.100.128/25"
	domain:			"example.com"
	min:			"198.51.100.200"
	max:			"198.51.100.210"
	default_lease_time:	3600
	max_lease_time:		0
	profile:		"foo"
      }

  DHCPHost;
    description: content of a DHCP static host
    type: object
    properties:
      network:		cidr
      name:		string
      mac:		macaddr
      addr:		inet
      profile:		string | null
    example: |
      {
	name:		"www.example.com"
	network:	"198.51.100.128/25"
	mac:		"01:02:03:04:05:06"
	addr:		"198.51.100.130"
	profile:	"foo"
      }

  DHCPSubnet:
    description: content of a DHCP subnet
    type: object
    properties:
      network:		cidr
      addr:		inet
      netmask:		inet
      gw:		inet
      comment:		string
    example: |
      {
	network:	"198.51.100.128/25"
	addr:		"198.51.100.128"
	netmask:	"255.255.255.128"
	gw:		"198.51.100.254"
	comment:	"A test network"
      }

  DHCPContent:
    description: content of a DHCP generation
    type: object
    properties:
      counter:			integer
      default_lease_time:	string
      max_lease_time:		string
      dhcpdefdomain:		string
      dhcpdefdnslist:		string
      profiles:			DHCPProfile []
      ranges:			DHCPRange []
      hosts:			DHCPHost []
      subnets:			DHCPSubnet []
    example: |
      {
	counter:		123
	default_lease_time:	3600
	max_lease_time:		7200
	dhcpdefdomain:		"example.com"
	dhcpdefdnslist:		"1.2.3.4, 5.6.7.8"
	profiles:		[
				  {
				    name:	"foo"
				    text:	"some ISC DHCP directives;"
				  }
				]
	ranges:			[
				  {
				    network:	"198.51.100.128/25"
				    domain:	"example.com"
				    min:	"198.51.100.200"
				    max:	"198.51.100.210"
				    default_lease_time:	3600
				    max_lease_time:		0
				    profile:	"foo"
				  }
				]
	hosts:			[
				  {
				    name:	"www.example.com"
				    network:	"198.51.100.128/25"
				    mac:	"01:02:03:04:05:06"
				    addr:	"198.51.100.130"
				    profile:	"foo"
				  }
				]
	subnets:		[
				  {
				    network:	"198.51.100.128/25"
				    addr:	"198.51.100.128"
				    netmask:	"255.255.255.128"
				    gw:		"198.51.100.254"
				    comment:	"A test network"
				  }
				]
      }

  MrouteParam:
    description: description of a view for Mail route generation
    type: object
    properties:
      name:		string
    example: |
      {
	name: "internal",
      }

  MrouteContent:
    description: content of an individual mail route
    type: object
    properties:
      mailaddr:			string
      mailhost:			string
    example: |
      {
	mailaddr:		sales.example.com
	mailhost:		mailserver.example.com
      }

  SMTPFParam:
    description: description of a view for SMTP filter generation
    type: object
    properties:
      name:		string
    example: |
      {
	name: "external",
      }

  SMTPFContent:
    description: content of an individual SMTP filter
    type: object
    properties:
      addr:			inet
    example: |
      {
	addr:	"198.51.100.1"
      }


  AdminNetwork:
    description: a row in the network table, without id
    type: object
    properties:
      name:		string
      location:		string
      addr4:		inet
      addr6:		inet
      idorg:		integer
      idcomm:		integer
      dhcp:
	enum: [0, 1]
      gw4:		inet
      addr6:		inet
    example: |
      {
	name: "server backbone"
	location: "bldg a"
	addr4: 172.16.1.0/24
	addr6: 2001:db8:1234:5678::/64
	idorg: 2
	idcomm: 3
	dhcp: 1
	gw4: 172.16.1.254
	addr6: 2001:db8:1234:5678::1
      }

  AdminNetworkId:
    description: a row in the network table, with id
    type: AdminNetwork
      properties:
	idnet:		integer
    example: |
      {
	idnet: 1
	name: "server backbone"
	location: "bldg a"
	addr4: 172.16.1.0/24
	addr6: 2001:db8:1234:5678::/64
	idorg: 2
	idcomm: 3
	dhcp: 1
	gw4: 172.16.1.254
	addr6: 2001:db8:1234:5678::1
      }

  AdminCommunity:
    description: a row in the community table, without id
    type: object
    properties:
      name:		string
    example: |
      {
	name: "marketing"
      }

  AdminCommunityId:
    description: a row in the community table, with id
    type: AdminCommunity
      properties:
	idcomm:		integer
    example: |
      {
	idcomm: 1
	name: "marketing"
      }

  AdminOrganization:
    description: a row in the organization table, without id
    type: object
    properties:
      name:		string
    example: |
      {
	name: "Example Corp."
      }

  AdminOrganizationId:
    description: a row in the organization table, with id
    type: AdminOrganization
      properties:
	idorg:		integer
    example: |
      {
	idorg: 1
	name: "Example Corp."
      }

  AdminHinfo:
    description: a row in the hinfo table, without id
    type: object
    properties:
      name:		string
      sort:		integer
      present:
	enum: [0, 1]
    example: |
      {
	name: "PC/FreeBSD"
	sort: 100
	present: 1
      }

  AdminHinfoId:
    description: a row in the organization table, with id
    type: AdminHinfo
      properties:
	idhinfo:	integer
    example: |
      {
	idhinfo: 1
	name: "PC/FreeBSD"
	sort: 100
	present: 1
      }

  AdminDomain:
    description: a row in the domain table, without id
    type: object
    properties:
      name:		string
    example: |
      {
	name: "example.com"
      }

  AdminDomainId:
    description: a row in the domain table, with id
    type: AdminDomain
      properties:
	iddom:		integer
    example: |
      {
	iddom: 1
	name: "example.com"
      }

  AdminDHCPProfile:
    description: a row in the DHCP profile table, without id
    type: object
    properties:
      name:		string
      text:		string
    example: |
      {
	name: "example.com"
	text: "server-name \"s.example.com\" ;\nfilename \"/pxeboot\" ;"
      }

  AdminDHCPProfileId:
    description: a row in the DHCP profile table, with id
    type: AdminDHCPProfile
      properties:
	iddhcpprof:	integer
    example: |
      {
	iddhcpprof: 1
	name: "example.com"
	text: "server-name \"s.example.com\" ;\nfilename \"/pxeboot\" ;"
      }

  AdminView:
    description: a row in the view table, without id
    type: object
    properties:
      name:		string
      gendhcp:
	enum: [0, 1]
    example: |
      {
	name: "internal"
	gendhcp: 0
      }

  AdminViewId:
    description: a row in the view table, with id
    type: AdminView
      properties:
	idview:	integer
    example: |
      {
	idview: 1
	name: "internal"
	gendhcp: 0
      }

  AdminZone:
    description: a base type for all zone table, without id
    type: object
    properties:
      name:		string
      idview:		integer
      version:		integer
      prologue:		string
      rrsup:		string
      gen:
	enum: [0, 1]
      counter:		integer

  AdminZoneId:
    description: base type for a row in all zone table, with id
    type: AdminZone
      properties:
	idzone:	integer

  AdminForwardZone:
    description: a row in the forward zone table, without id
    type: AdminZone
    properties:
      selection:	string
    example: |
      {
	name: "example.com"
	idview: 1
	version: 2016070401
	prologue: "@ IN SOA ...\n"
	rrsup: ""
	gen: 0
	counter: 123
	selection: "example.com"
      }

  AdminForwardZoneId:
    description: a row in the forward zone table, with id
    type: AdminZoneId
    properties:
      selection:	string
    example: |
      {
	idzone: 0
	name: "example.com"
	idview: 1
	version: 2016070401
	prologue: "@ IN SOA ...\n"
	rrsup: ""
	gen: 0
	counter: 123
	selection: "example.com"
      }

  AdminReverse4Zone:
    description: a row in the reverse (IPv4) zone table, without id
    type: AdminZone
    properties:
      selection:	cidr
    example: |
      {
	name: "100.51.198.in-addr.arpa"
	idview: 1
	version: 2016070401
	prologue: "@ IN SOA ...\n"
	rrsup: ""
	gen: 0
	counter: 123
	selection: "198.51.100.0/24"
      }

  AdminReverse4ZoneId:
    description: a row in the reverse (IPv4) zone table, with id
    type: AdminZoneId
    properties:
      selection:	string
    example: |
      {
	name: "100.51.198.in-addr.arpa"
	idview: 1
	version: 2016070401
	prologue: "@ IN SOA ...\n"
	rrsup: ""
	gen: 0
	counter: 123
	selection: "198.51.100.0/24"
      }

  AdminReverse6Zone:
    description: a row in the reverse (IPv6) zone table, without id
    type: AdminZone
    properties:
      selection:	cidr
    example: |
      {
	name: "4.3.2.1.8.b.d.0.1.0.0.2.ip6.arpa"
	idview: 1
	version: 2016070401
	prologue: "@ IN SOA ...\n"
	rrsup: ""
	gen: 0
	counter: 123
	selection: "2001:db8:1234::/48"
      }

  AdminReverse6ZoneId:
    description: a row in the reverse (IPv6) zone table, with id
    type: AdminZoneId
    properties:
      selection:	string
    example: |
      {
	name: "4.3.2.1.8.b.d.0.1.0.0.2.ip6.arpa"
	idview: 1
	version: 2016070401
	prologue: "@ IN SOA ...\n"
	rrsup: ""
	gen: 0
	counter: 123
	selection: "2001:db8:1234::/48"
      }

  AdminConfig:
    description: a row in the config table, without key
    type: object
    properties:
      value:		string
    example: |
      {
	value: pgsql
      }

  AdminConfigKey:
    description: a row in the config table, with key
    type: AdminConfigKey
    properties:
      key:		string
    example: |
      {
	key: authmethod
	value: pgsql
      }

  AdminUser:
    description: a Netmagis user, without id
    type: object
    properties:
      login:		string
      present:
	enum: [0, 1]
      idgrp:		integer
    example: |
      {
	login:	foo
	present: 1
	idgrp: 1
      }

  AdminUserId:
    description: a Netmagis user, with id
    type: AdminUser
      properties:
	idcor:		integer
    example: |
      {
	idcor: 1
	login:	foo
	present: 1
	idgrp: 1
      }

  AdminGroup:
    description: a Netmagis group, without id
    type: object
    properties:
      name:		string
      p_admin:
	enum: [0, 1]
      p_smtp:
	enum: [0, 1]
      p_ttl:
	enum: [0, 1]
      p_mac:
	enum: [0, 1]
      p_genl:
	enum: [0, 1]
      p_genz:
	enum: [0, 1]
    example: |
      {
	name: staff
	p_admin: 1
	p_smtp: 1
	p_ttl: 1
	p_mac: 1
	p_genl: 1
	p_genz: 1
      }

  AdminGroupId:
    description: a Netmagis group, with id
    type: AdminGroup
      properties:
	idgrp:		integer
    example: |
      {
	idgrp: 1
	name: staff
	p_admin: 1
	p_smtp: 1
	p_ttl: 1
	p_mac: 1
	p_genl: 1
	p_genz: 1
      }

  AdminP_Ip:
    description: base type for IP permission
    type: object:
    properties:
      idgrp:		integer
      addr:		inet
      allow_deny:
	enum: [0, 1]
    example: |
      {
	idgrp: 1
	addr: 172.16.10.0/24
	allow_deny: 1
      }

  AdminP_IpId:
    description: a IP permission, with
    type: object
    properties:
      idgrp:		integer
      perm:		AdminP_Ip []
    example: |
      {
	idgrp: 1
	perm: [
	  {
	    idgrp: 1
	    addr: 172.16.10.0/24
	    allow_deny: 1
	  }
	  {
	    idgrp: 1
	    addr: 172.16.10.254/31
	    allow_deny: 0
	  }
	]
      }

  AdminP_Network:
    description: base type for network permission
    type: object:
    properties:
      idgrp:		integer
      idnet:		integer
      sort:		integer
      dhcp:
	enum: [0, 1]
      acl:
	enum: [0, 1]
    example: |
      {
	idgrp: 1
	idnet: 1
	sort: 100
	dhcp: 1
	acl: 0
      }

  AdminP_NetworkId:
    description: a network permission, with Id
    type: object
    properties:
      idgrp:		integer
      perm:		AdminP_Network []
    example: |
      {
	idgrp: 1
	perm: [
	  {
	    idgrp: 1
	    idnet: 1
	    sort: 100
	    dhcp: 1
	    acl: 0
	  }
	  {
	    idgrp: 1
	    idnet: 2
	    sort: 200
	    dhcp: 0
	    acl: 0
	  }
	]
      }

  AdminP_View:
    description: base type for view permission
    type: object:
    properties:
      idgrp:		integer
      idview:		integer
      sort:		integer
      selected:
	enum: [0, 1]
    example: |
      {
	idgrp: 1
	idview: 1
	sort: 100
	selected: 1
      }

  AdminP_ViewId:
    description: a view permission, with Id
    type: object
    properties:
      idgrp:		integer
      perm:		AdminP_View []
    example: |
      {
	idgrp: 1
	perm: [
	  {
	    idgrp: 1
	    idview: 1
	    sort: 100
	    selected: 1
	  }
	  {
	    idgrp: 1
	    idview: 2
	    sort: 200
	    selected: 0
	  }
	]
      }


  AdminP_DHCPProfile:
    description: base type for DHCP profile permission
    type: object:
    properties:
      idgrp:		integer
      iddhcpprof:	integer
      sort:		integer
    example: |
      {
	idgrp: 1
	iddhcpprof: 1
	sort: 100
      }

  AdminP_DHCPProfileId:
    description: a DHCP profile permission, with Id
    type: object
    properties:
      idgrp:		integer
      perm:		AdminP_DHCPProfile []
    example: |
      {
	idgrp: 1
	perm: [
	  {
	    idgrp: 1
	    iddhcpprof: 1
	    sort: 100
	  }
	  {
	    idgrp: 1
	    iddhcpprof: 2
	    sort: 200
	  }
	]
      }


  AdminP_Dom:
    description: base type for domain permission
    type: object:
    properties:
      idgrp:		integer
      iddom:		integer
      sort:		integer
      mailrole:
	enum: [0, 1]
    example: |
      {
	idgrp: 1
	iddom: 1
	sort: 100
	mailrole: 1
      }

  AdminP_DomId:
    description: a domain permission, with Id
    type: object
    properties:
      idgrp:		integer
      perm:		AdminP_Dom []
    example: |
      {
	idgrp: 1
	perm: [
	  {
	    idgrp: 1
	    iddom: 1
	    sort: 100
	    mailrole: 1
	  }
	  {
	    idgrp: 1
	    iddom: 2
	    sort: 200
	    mailrole: 0
	  }
	]
      }


##############################################################################
# Sessions
##############################################################################

/sessions
  description: Collection of sessions
  get:
    description: Get all my sessions
    queryParameters:
      active:
        description: restrict collection to active (1) or expired (0) sessions
        required: false
        default: 1		# only active sessions
    responses:
      200:
	body:
	  application/json:
	    type: ActiveSession[] | ExpiredSession[] # depending on active q
	    example: |
	      [
		{
		    active:	1
		    api:	0
		    token:	kdjfdsfsdhsdjfhsj
		    start:	2016-04-22T15:35:24
		    ip:		198.51.100.1
		    casticket:	
		    lastaccess:	2016-06-24T16:36:30
		}
	      ]
  post:
    description: Create a new session
    queryParameters:		# none
    body:
      type: object
      properties:
	login:		string
	password:	string
      example: |
	{
	  login:		myusername
	  password:		mypassword
	}
    responses:
      200:
	description: login successful
        body:
          application/json:
	    value:	null
      412:
        description: invalid input (json format, invalid login)
      403:
        description: login failed or session already opened
      429:
        description: account or IP temporarily blocked
      500:
        description: temporary failure
  delete:
    description: Remove current session
    queryParameters:		# none
    body:			# none
    responses:
      200:
        body:
          application/json:
	    value: null

##############################################################################
# User capabilities
##############################################################################

/cap
  description: Collection of capabilities for this user
  get:
    description: Get all my capabilities
    queryParameters:		# none
    responses:
      200:
	body:
	  application/json:
	    type: Capability
	    example: |
	      {
		user: "pda"
		lang: "fr"
		cap: [
		  "any",
		  "logged",
		  "admin",
		  "topo",
		  "topogenl",
		  "genz",
		  "mac",
		  "pgauth",
		  "pgadmin"
		]
	      }


##############################################################################
# Blocks of free IPv4 addresses
##############################################################################

/freeblocks
  description: Collection of free IPv4 addresses
  get:
    description: Get all free IPv4 blocks inside a CIDR
    queryParameters:
      cidr:
        description: address range
	type: inet
        required: true
      size:
        description: minimal size of desired block
	type: integer
        required: true
      sort:
	description: sort criterion
        type:
	  enum: [ addr, size ]
        required: false
        default: addr
    responses:
      200:
        body:
          application/json:
            example: |
              [
                {
                  addr: 172.16.1.10,
                  size: 20
                },
                {
                  addr: 172.16.1.70,
                  size: 10
                }
              ]
      412:
        description: invalid input

##############################################################################
# Allowed domains
##############################################################################

/domains
  description: Collection of allowed domains
  get:
    description: Get a list of allowed domains
    queryParameters:
      mailrole:
        description: Restrict list to domains with mailrole permission
        type: boolean
        required: false
        default: no
        example: yes
    responses:
      200:
        body:
	  type: AllowedDomain[]
	  example: |
	    "domains": [
	      {
		"iddom": 5,
		"name": "example.com"
	      },
	      {
		"iddom": 19,
		"name": "example.org"
	      }
	    ]

##############################################################################
# Allowed DHCP Range
##############################################################################

/dhcpranges
  description: Collection of dynamic DHCP ranges

  get:
    description: Get all DHCP ranges allowed for my group for a given addr
    queryParameters:
      cidr:
        type: inet
        required: true
        example: 198.51.100.0/24
    responses:
      200:
	body:
	  type: AllowedDHCPRange[]
	  example: |
	    [
	      {
		iddhcprange: 1
		min: 198.51.100.10
		max: 198.51.100.20
		iddom: 2
		domain: example.com
		default_lease_time: null
		max_lease_time: 3600
		iddhcpprof: 3
		dhcpprofile: x-terminal
		editable: true
	      },
	      {
		iddhcprange: 5
		min: 198.51.100.30
		max: 198.51.100.40
		iddom: 2
		domain: example.com
		default_lease_time: 7200
		max_lease_time: 3600
		iddhcpprof: null
		dhcpprofile: null
		editable: false
	      }
	    ]

  post:
    description: add a new DHCP range
    queryParameters:			# none
    body:
      type: DHCPRange			# without id
      example: |
	{
	  min: 198.51.100.10
	  max: 198.51.100.20
	  iddom: 2
	  default_lease_time: null
	  max_lease_time: 3600
	  iddhcpprof: 3
	}
    responses:
      200:
        body:
	  type: AllowedDHCPRange
	  example: |
	    {
	      iddhcprange: 12
	      min: 198.51.100.10
	      max: 198.51.100.20
	      iddom: 2
	      domain: example.com
	      default_lease_time: null
	      max_lease_time: 3600
	      iddhcpprof: 3
	      dhcpprofile: x-terminal
	      editable: true
	    }

  /{iddhcprange}:
    description: one dynamic DHCP range

    put:
      description: update an existing DHCP range
      body:
	type: DHCPRange
	example: |
	  {
	    min: 198.51.100.10
	    max: 198.51.100.20
	    iddom: 2
	    default_lease_time: null
	    max_lease_time: 3600
	    iddhcpprof: 3
	  }
      responses:
        200:
          body:
	    type: AllowedDHCPRange
	    example: |
	      {
		iddhcprange: 12
		min: 198.51.100.10
		max: 198.51.100.20
		iddom: 2
		domain: example.com
		default_lease_time: null
		max_lease_time: 3600
		iddhcpprof: 3
		dhcpprofile: x-terminal
		editable: true
	      }

    delete:
      description: delete an existing DHCP range
      body:				# none
      responses:
        200:
          body:
	    type: text/plain
	    example: OK

##############################################################################
# Allowed DHCP profiles
##############################################################################

/dhcpprofiles
  description: Collection of DHCP profiles

  get:
    description: get all DHCP profiles allowed for my group, sorted
    queryParameters:			# none
    body:				# none
    responses:
      200:
        body:
	  type: AllowedDHCPRange[]
	  example: |
	    [
	      {
		iddhcpprof: 5
		name: "x terminal"
	      },
	      {
		iddhcpprof: 1
		name: "iq laser printer"
	      }
	    ]

  /{iddhcpprof}:
    description: one DHCP profile

    get:
      description: get one specific DHCP profile
      queryParameters:			# none
      body:				# none
      responses:
        200:
	  body: AllowedDHCPRange
	  example: |
	    {
	      iddhcpprof: 1
	      name: "iq laser printer"
	    }

##############################################################################
# Allowed Views
##############################################################################

/views
  description: Collection of allowed views

  get:
    queryParameter:			# none
    body:				# none
    responses:
      200:
	description: sorted list of allowed views
        body:
	  type: AllowedView []
          application/json:
            example: |
              [
                {
                  name: "internal",
                  selected: 1
                },
                {
                  name: "external",
                  selected: 0
                }
              ]

  /{viewId}
    description: A single view
    get:
      description: get a single view
      queryParameters: 			# none
      body:				# none
      responses:
        200:
          body:
	      type: AllowedView
              example: |
                {
                  name: "external",
                  selected: 0
                }

##############################################################################
# Static files
##############################################################################

/files/{fileName}
  description: get a single file

  get:
    description: get a single file
    queryParameters:			# none
    body:				# none
    responses:
      200:				# XXX
      404:

##############################################################################
# Host info (HINFO resource record type)
##############################################################################

/hinfos
  description: Collection of host infos (resource record)

  get:
    description: get all HINFO values
    queryParameters:
      present:
        description: 1 to restrict collection to "present" values only
        required: false
        default: get all values (present and non present)
    body:				# none
    responses:
      200:
        body:
	  description: sorted list of Hinfo values
	  type: Hinfo []
	  example: |
	    [
	      {
		idhinfo: 3
		name: "X terminal"
		present: 0
	      },
	      {
		idhinfo: 4
		name: "unspecified"
		present: 0
	      }
	    ]

##############################################################################
# Allowed Networks
##############################################################################

/networks
  description: Collection of allowed networks

  get:
    description: get all DHCP profiles allowed for my group, sorted
    queryParameters:			# none
    body:				# none
    responses:
      200:
        body:
	  description: sorted list of networks
	  type: AllowedNetwork []
	  example: |
	    [
	      {
		name:		"my network"
		location:	"Bldg A"
		addr4:		198.51.100.0/24
		addr6:		2001:db8:1234:5678::/64
		organization:	"Example Inc."
		community:	"servers"
		comment:	"an example network fom example Inc."
		dhcp:		0
		gw4:		198.51.100.254
		gw6:		2001:db8:1234:5678::1
	      },
	      {
		name:		"another network"
		location:	"Bldg B"
		addr4:		192.168.1.0/24
		addr6:		""
		organization:	"Example Inc."
		community:	"workstations"
		comment:	"another example network fom example Inc."
		dhcp:		1
		gw4:		192.168.1.254
		gw6:		""
	      }
	    ]

  /{idnetwork}:				# XXX USEFUL?

##############################################################################
# Search results
##############################################################################

/search
  description: Collection of search results
  get:
    description:
    queryParameters:
      q:
        required: true
        type: string
        example: "foo"
    responses:
      200:
        body:
	  type: SearchResult
	  example: |
	    [
	      {
		type: "domain",
		link: "/domains/5"
	      },
	      {
		type: "name",
		link: "/names/123"
	      },
	      {
		type: "name",
		link: "/names/456"
	      }
	    ]

##############################################################################
# Host management
##############################################################################

/hosts
  description: A collection of hosts

  get:
    queryParameters:
      view:
        description: filter on view name
        type: string
        required: false
      name:
        description: filter on name
        type: string
        required: false
      domain:
        description: filter on domain name
        type: string
        required: false
      addr:
        description: filter on IP address
        type: cidr (v4 or v6)
        required: false
      sort:         # XXX BUG
        description: sort result
        type: comma-separated list of {name, domain, addr, view}
        required: false
    responses:
      200:
        body:
	  description: unsorted list of names
	  type: ShortHost []
	  example: |
            example: |
              [ 
                {
                  idhost: 123,
                  name: www,
                  iddom: 1,
                  domain: example.org,
                  idview: 1,
                  view: internal
                },
                {
                  idhost: 456,
                  name: foo,
                  iddom: 2,
                  domain: example.com
                  idview: 2
                  view: external
                }
              ]

  post:
    description: Create a new host
    queryParameters:			# none
    body:
      type: FullHost
      example: |
	{
	  name: www
	  iddom: 1
	  idview: 1
	  mac: "01:02:03:04:05:06"
	  idhinfo: 2
	  comment: "a www server"
	  respname: "John Doe"
	  respmail: "foo@example.com"
	  iddhcpprof: -1
	  sendsmtp: 0
	  ttl: 0
	  addr: [172.16.1.1, 2001:db8:1234:5678::ff]
	}
    responses:
      200:
        body:
	  type: text/plain
	  exemple:
	    123

  /{idhost}
    description: Get a single host
    queryParameters:			# none
    get:
      responses:
        200:
          body:
            type: FullHost
	    example: |
	      {
		name: www
		iddom: 1
		idview: 1
		mac: "01:02:03:04:05:06"
		idhinfo: 2
		comment: "a www server"
		respname: "John Doe"
		respmail: "foo@example.com"
		iddhcpprof: -1
		sendsmtp: 0
		ttl: 0
		addr: [172.16.1.1, 2001:db8:1234:5678::ff]
	      }

    put:
      description: update a host
      body:
	type: FullHost
      responses:
	200:
	  body:
	    type: FullHost
	    example: |
	      {
		name: newname
		iddom: 1
		idview: 1
		mac: "01:02:03:04:05:06"
		idhinfo: 2
		comment: "a new www server"
		respname: "John Doe Jr."
		respmail: "foo@example.com"
		iddhcpprof: -1
		sendsmtp: 0
		ttl: 0
		addr: [172.16.1.1, 2001:db8:1234:5678::ff]
	      }


    delete:
      description: delete a host
      body:				# none
      responses:
        200:
          body:
	    type: text/plain
	    example: OK



##############################################################################
# Alias management
##############################################################################

/aliases
  description: A collection of host aliases

  get:
    queryParameters:
      view:
        description: filter on view name
        type: string
        required: false
      name:
        description: filter on name
        type: string
        required: false
      domain:
        description: filter on domain name
        type: string
        required: false
      idhost:
        description: filter on a specific host
        type: integer
        required: false
      sort:         # XXX BUG
        description: sort result
        type: comma-separated list of {name, domain, idhost, view}
        required: false
    responses:
      200:
        body:
	  description: unsorted list of aliases
	  type: AliasWithNameId []
	  example: |
            example: |
              [ 
                {
		  idalias: 456,
		  name: www,
		  iddom: 1,
		  idview: 1,
		  ttl: -1,
		  idhost: 123,
		},
                {
		  idalias: 789,
		  name: ftp,
		  iddom: 2,
		  idview: 2,
		  ttl: -1,
		  idhost: 543,
		},
              ]

  post:
    description: Create a new alias
    queryParameters:			# none
    body:
      type: AliasWithName
      example: |
	{
	  name: www,
	  iddom: 1,
	  idview: 1,
	  ttl: -1,
	  idhost: 123,
	}
    responses:
      200:
        body:
	  type: application/json
	  exemple:
	    123

  /{idalias}
    description: Get a single alias
    queryParameters:			# none
    get:
      responses:
        200:
          body:
            type: AliasWithName
	    example: |
	      {
		name: www,
		iddom: 1,
		idview: 1,
		ttl: -1,
		idhost: 123,
	      }

    put:
      description: update a single alias
      body:
	type: AliasMod
	example: |
	  {
	    ttl: -1,
	    idhost: 123,
	  }
      responses:
	200:
	  body:
	    type: AliasWithName
	    example: |
	      {
		name: www,
		iddom: 1,
		idview: 1,
		ttl: -1,
		idhost: 123,
	      }


    delete:
      description: delete a single alias
      body:				# none
      responses:
        200:
          body:
	    type: text/plain
	    example: OK

##############################################################################
# Mailrole management
##############################################################################

/mailroles
  description: A collection of mail roles

  get:
    queryParameters:
      view:
        description: filter on view name
        type: string
        required: false
      name:
        description: filter on mail address name
        type: string
        required: false
      domain:
        description: filter on domain name
        type: string
        required: false
      idhost:
        description: filter on a specific mailbox host
        type: integer
        required: false
      sort:         # XXX BUG
        description: sort result
        type: comma-separated list of {name, domain, idhost, view}
        required: false
    responses:
      200:
        body:
	  description: unsorted list of mail roles
	  type: MailroleWithNameId []
	  example: |
            example: |
              [ 
                {
		  idmailrole: 456,
		  name: www,
		  iddom: 1,
		  idview: 1,
		  ttl: -1,
		  idhost: 123,
		},
                {
		  idmailrole: 789,
		  name: sales,
		  iddom: 2,
		  idview: 2,
		  ttl: -1,
		  idhost: 543,
		},
              ]

  post:
    description: Create a new mail role
    queryParameters:			# none
    body:
      type: MailroleWithName
      example: |
	{
	  name: www,
	  iddom: 1,
	  idview: 1,
	  ttl: -1,
	  idhost: 123,
	}
    responses:
      200:
        body:
	  type: text/plain
	  exemple:
	    123

  /{idmailrole}
    description: Get a single mail role
    queryParameters:			# none
    get:
      responses:
        200:
          body:
            type: MailroleWithName
	    example: |
	      {
		name: www,
		iddom: 1,
		idview: 1,
		ttl: -1,
		idhost: 123,
	      }

    put:
      description: update a single mail role with a new mboxhost
      body:
	type: MailroleHost
	example: |
	  {
	    ttl: -1,
	    idhost: 123,
	  }
      responses:
	200:
	  body:
	    type: MailroleWithName
	    example: |
	      {
		name: www,
		iddom: 1,
		idview: 1,
		ttl: -1,
		idhost: 123,
	      }


    delete:
      description: delete a single mail role
      body:				# none
      responses:
        200:
          body:
	    type: text/plain
	    example: OK



##############################################################################
# MX management
##############################################################################

/mx
  description: A collection of MX records associated with a name

  get:
    queryParameters:
      view:
        description: filter on view name
        type: string
        required: false
      name:
        description: filter on MX name
        type: string
        required: false
      domain:
        description: filter on MX domain name
        type: string
        required: false
      idhost:
        description: filter on a specific MX target host
        type: integer
        required: false
      sort:         # XXX BUG
        description: sort result
        type: comma-separated list of {name, domain, idhost, view}
        required: false
    responses:
      200:
        body:
	  description: unsorted list of MX records
	  type: MXWithNameId []
	  example: |
	    [ 
	      {
		idmx: 456,
		name: sales,
		iddom: 1,
		idview: 1,
		mxhosts: [
		  {
		    prio: 100
		    ttl: -1,
		    idhost: 123,
		  },
		  {
		    prio: 200
		    ttl: -1,
		    idhost: 124,
		  }
		]
	      },
	      {
		idmx: 789,
		name: marketing,
		iddom: 2,
		idview: 2,
		mxhosts: [
		  {
		    prio: 100
		    ttl: -1,
		    idhost: 345,
		  },
		]
	      },
	    ]

  post:
    description: Create a new MX
    queryParameters:			# none
    body:
      type: MXWithName
      example: |
	{
	  name: marketing,
	  iddom: 2,
	  idview: 2,
	  mxhosts: [
	    {
	      prio: 100
	      ttl: -1,
	      idhost: 345,
	    },
	  ]
	}
    responses:
      200:
        body:
	  type: text/plain
	  exemple:
	    789

  /{idmx}
    description: Get a single MX with all its target hosts
    queryParameters:			# none
    get:
      responses:
        200:
          body:
            type: MXWithName
	    example: |
	      {
		name: sales,
		iddom: 1,
		idview: 1,
		mxhosts: [
		  {
		    prio: 100
		    ttl: -1,
		    idhost: 123,
		  },
		  {
		    prio: 200
		    ttl: -1,
		    idhost: 124,
		  }
		]
	      }

    put:
      description: update a single MX with all its target hosts
      body:
	type: MXHost []
	example: |
	  [
	    {
	      prio: 100
	      ttl: -1,
	      idhost: 123,
	    },
	    {
	      prio: 200
	      ttl: -1,
	      idhost: 124,
	    }
	  ]
      responses:
	200:
	  body:
	    type: MXWithName
	    example: |
	      {
		name: sales,
		iddom: 1,
		idview: 1,
		mxhosts: [
		  {
		    prio: 100
		    ttl: -1,
		    idhost: 123,
		  },
		  {
		    prio: 200
		    ttl: -1,
		    idhost: 124,
		  }
		]
	      }


    delete:
      description: delete a single MX
      body:				# none
      responses:
        200:
          body:
	    type: text/plain
	    example: OK



##############################################################################
# Relaydom management
##############################################################################

/relaydoms
  description: A collection of mail relays associated with a domain

  get:
    queryParameters:
      view:
        description: filter on view name
        type: string
        required: false
      domain:
        description: filter on domain name
        type: string
        required: false
      idhost:
        description: filter on a specific relay host
        type: integer
        required: false
      minrelay:
        description: filter on a minimim number of relays
        type: integer
        required: false
      sort:         # XXX BUG
        description: sort result
        type: comma-separated list of {view, domain}
        required: false
    responses:
      200:
        body:
	  description: list of relay domains
	  type: Relaydom []
	  example: |
	    [ 
	      {
		iddom: 3,
		idview: 1,
		relays: [
		  {
		    prio: 100,
		    ttl: -1,
		    idhost: 123,
		  },
		  {
		    prio: 200,
		    ttl: -1,
		    idhost: 124,
		  }
		]
	      },
	      {
		iddom: 4,
		idview: 1,
		relays: [
		  {
		    prio: 100,
		    ttl: -1,
		    idhost: 345,
		  },
		]
	      },
	      {
		iddom: 5,
		idview: 2,
		relays: []
	      },
	    ]

  /{idview}/{iddom}
    description: Get mail relays for a given domain and a given view
    queryParameters:			# none
    get:
      responses:
        200:
          body:
            type: Relaydom
	    example: |
	      {
		iddom: 3,
		idview: 1,
		relays: [
		  {
		    prio: 100,
		    ttl: -1,
		    idhost: 123,
		  },
		  {
		    prio: 200,
		    ttl: -1,
		    idhost: 124,
		  }
		]
	      },

    put:
      description: update mail relays for a given domain and a given view
      body:
	type: MXHost []
	example: |
	  [
	    {
	      prio: 100,
	      ttl: -1,
	      idhost: 123,
	    },
	    {
	      prio: 200,
	      ttl: -1,
	      idhost: 124,
	    }
	  ]
      responses:
	200:
	  body:
	    type: Relaydom
	    example: |
	      {
		iddom: 3,
		idview: 1,
		relays: [
		  {
		    prio: 100,
		    ttl: -1,
		    idhost: 123,
		  },
		  {
		    prio: 200,
		    ttl: -1,
		    idhost: 124,
		  }
		]
	      }

##############################################################################
# Zone generation
##############################################################################

/gen
  /zones
    description: Collection of zones for generation
    get:
      description:
      queryParameters:
	name:
	  required: false
	  type: string
	  example: "168.192.in-addr.arpa"
	view:
	  required: false
	  type: string
	  example: "internal"
	gen:
	  required: false
	  type: boolean (0/1)
	  example: 1
      responses:
	200:
	  body:
	    application/json:
	      description: list of zones
	      type: ZoneParam []
	      example: |
		[
		  {
		    name: "example.com.internal",
		    idview: 5,
		    gen: 0
		  },
		  {
		    name: "example.org.external",
		    idview: 2,
		    gen: 1
		  }
		]
    post:
      description: register generation for a collection of zones
      queryParameters:
      body:
	application/json:
	  type: ZoneGen []
	  example: |
	    [
	      {
		name: "example.org.internal",
		counter: 123
	      },
	      {
		name: "example.org.external",
		counter: 456
	      }
	    ]
      responses:
	200:
	  body:
	    application/json:
	      type: empty
	      example: null


    /{zoneName}
      description: zone content
      get:
	description: get zone content without modify it (no gen=0 nor version inc)
	queryParameters:
	responses:
	  200:
	    body:
	      application/json:
		type: ZoneContent
		example: |
		  {
		    prologue: "@ SOA .... \n ..."
		    rrsup: ""
		    counter: 123
		    records: [
		      {
			name: "foo",
			ttl: 60,
			type: "A",
			rdata: "198.51.100.1"
		      },
		      {
			name: "foo",
			ttl: -1,
			type: "MX",
			rdata: "100 mx1.example.com"
		      }
		    ]
		  }

  /dhcp
    description: Collection of DHCP informations for generation
    get:
      description:
      queryParameters:
	view:
	  required: false
	  type: string
	  example: "internal"
	gen:
	  required: false
	  type: boolean (0/1)
	  example: 1
      responses:
	200:
	  body:
	    application/json:
	      description: list of views for which generation is needed
	      type: GenDHCPParm []
	      example: |
		[
		  {
		    name: "internal",
		    gen: 0,
		    counter: 123
		  },
		  {
		    name: "external",
		    gen: 1
		    counter: 456
		  }
		]
    post:
      description: register generation for a collection of views
      queryParameters:
      body:
	application/json:
	  type: GenDHCPGen []
	  example: |
	    [
	      {
		name: "internal",
		counter: 123
	      },
	      {
		name: "external",
		counter: 456
	      }
	    ]
      responses:
	200:
	  body:
	    application/json:
	      type: empty
	      example: null


    /{viewName}
      description: DHCP informations for generation
      get:
	description: get DHCP informations for generation
	queryParameters:
	responses:
	  200:
	    body:
	      application/json:
		type: DHCPContent
		example: |
		  {
		    counter:		123
		    default_lease_time:	3600
		    max_lease_time:	7200
		    dhcpdefdomain:	"example.com"
		    dhcpdefdnslist:	"1.2.3.4, 5.6.7.8"
		    profiles:	[
				  {
				    name:	"foo"
				    text:	"some ISC DHCP directives;"
				  }
				]
		    ranges:	[
				  {
				    network:	"198.51.100.128/25"
				    domain:	"example.com"
				    min:	"198.51.100.200"
				    max:	"198.51.100.210"
				    default_lease_time:	3600
				    max_lease_time:		0
				    profile:	"foo"
				  }
				]
		    hosts:	[
				  {
				    name:	"www.example.com"
				    network:	"198.51.100.128/25"
				    mac:	"01:02:03:04:05:06"
				    addr:	"198.51.100.130"
				    profile:	"foo"
				  }
				]
		    subnets:	[
				  {
				    network:	"198.51.100.128/25"
				    addr:	"198.51.100.128"
				    netmask:	"255.255.255.128"
				    gw:		"198.51.100.254"
				    comment:	"A test network"
				  }
				]
		  }


  /mroute
    description: Collection of mail routes for generation
    get:
      description:
      queryParameters:
      responses:
	200:
	  body:
	    application/json:
	      description: list of views which contain mail routes
	      type: MrouteParam
	      example: |
		[
		  {
		    name: "internal",
		  },
		  {
		    name: "external",
		  }
		]

    /{viewName}
      description: informations for mail routes generation
      get:
	description: get mail route informations for generation
	queryParameters:
	responses:
	  200:
	    body:
	      application/json:
		type: MrouteContent []
		example: |
		  [
		    {
		      mailaddr:	sales.example.com
		      mailhost:	mailserver.example.com
		    }
		  ]

  /smtpf
    description: Collection of addresses of SMTP-enabled hosts for generation
    get:
      description:
      queryParameters:
      responses:
	200:
	  body:
	    application/json:
	      description: list of views which contain SMTP-enabled hosts
	      type: SMTPFParam
	      example: |
		[
		  {
		    name: "internal",
		  },
		  {
		    name: "external",
		  }
		]

    /{viewName}
      description: informations for SMTP filters for generation
      get:
	description: get SMTP-enabled host addresses for generation
	queryParameters:
	responses:
	  200:
	    body:
	      application/json:
		type: SMTPFContent []
		example: |
		  [
		    {
		      addr:	"198.51.100.1"
		    }
		  ]

##############################################################################
# Admin tables
##############################################################################

/admin/dns.network
  description: Collection of all networks

  get:
    description: Get all networks
    queryParameters:
      idorg:
        description: filter networks for this organization
        required: false
        default: get all networks
      idcomm:
        description: filter networks for this community
        required: false
        default: get all networks
    body:				# none
    responses:
      200:
        body:
	  description: List of all networks
	  type: AdminNetworkId []
	  example: |
	    [
	      {
		idnet: 1
		name: "server backbone"
		location: "bldg a"
		addr4: 172.16.1.0/24
		addr6: 2001:db8:1234:5678::/64
		idorg: 2
		idcomm: 3
		dhcp: 1
		gw4: 172.16.1.254
		addr6: 2001:db8:1234:5678::1
	      }
	    ]

  post:
    description: Add a new network
    queryParameters:			# none
    body:
      type: AdminNetwork		# without id
      example: |
	{
	  name: "server backbone"
	  location: "bldg a"
	  addr4: 172.16.1.0/24
	  addr6: 2001:db8:1234:5678::/64
	  idorg: 2
	  idcomm: 3
	  dhcp: 1
	  gw4: 172.16.1.254
	  addr6: 2001:db8:1234:5678::1
	}
    responses:
      200:
        body:
	  type: AdminNetworkId
	  example: |
	    {
	      idnet: 1
	      name: "server backbone"
	      location: "bldg a"
	      addr4: 172.16.1.0/24
	      addr6: 2001:db8:1234:5678::/64
	      idorg: 2
	      idcomm: 3
	      dhcp: 1
	      gw4: 172.16.1.254
	      addr6: 2001:db8:1234:5678::1
	    }

  /{id}
    description: a particular network

    put:
      description: update a network
      body:
	type: AdminNetwork
	example: |
	  {
	    name: "server backbone"
	    location: "bldg a"
	    addr4: 172.16.1.0/24
	    addr6: 2001:db8:1234:5678::/64
	    idorg: 2
	    idcomm: 3
	    dhcp: 1
	    gw4: 172.16.1.254
	    addr6: 2001:db8:1234:5678::1
	  }
      responses:
        200:
          body:
	    type: AdminNetworkId
	    example: |
	      {
		idnet: 1
		name: "server backbone"
		location: "bldg a"
		addr4: 172.16.1.0/24
		addr6: 2001:db8:1234:5678::/64
		idorg: 2
		idcomm: 3
		dhcp: 1
		gw4: 172.16.1.254
		addr6: 2001:db8:1234:5678::1
	      }

    delete:
      description: delete an existing network
      body:				# none
      responses:
        200:
          body:
	    type: text/plain
	    example: OK


/admin/dns.community
  description: Collection of all communities

  get:
    description: Get all communities
    queryParameters:			# none
    body:				# none
    responses:
      200:
        body:
	  description: List of all communities
	  type: AdminCommunityId []
	  example: |
	    [
	      {
		XXX
	      }
	    ]

  post:
    description: Add a new community
    queryParameters:			# none
    body:
      type: AdminCommunity		# without id
      example: |
	{
	  XXX
	}
    responses:
      200:
        body:
	  type: AdminCommunityId
	  example: |
	    {
	      XXX
	    }

  /{id}
    description: a particular community

    put:
      description: update a community
      body:
	type: AdminCommunity
	example: |
	  {
	    XXX
	  }
      responses:
        200:
          body:
	    type: AdminCommunityId
	    example: |
	      {
		XXX
	      }

    delete:
      description: delete an existing community
      body:				# none
      responses:
        200:
          body:
	    type: text/plain
	    example: OK


/admin/dns.organization
  description: Collection of all organizations

  get:
    description: Get all organizations
    queryParameters:			# none
    body:				# none
    responses:
      200:
        body:
	  description: List of all organizations
	  type: AdminOrganizationId []
	  example: |
	    [
	      {
		XXX
	      }
	    ]

  post:
    description: Add a new organization
    queryParameters:			# none
    body:
      type: AdminOrganization		# without id
      example: |
	{
	  XXX
	}
    responses:
      200:
        body:
	  type: AdminOrganizationId
	  example: |
	    {
	      XXX
	    }

  /{id}
    description: a particular organization

    put:
      description: update an organization
      body:
	type: AdminOrganization
	example: |
	  {
	    XXX
	  }
      responses:
        200:
          body:
	    type: AdminOrganizationId
	    example: |
	      {
		XXX
	      }

    delete:
      description: delete an existing organization
      body:				# none
      responses:
        200:
          body:
	    type: text/plain
	    example: OK


/admin/dns.hinfo
  description: Collection of all hinfo values

  get:
    description: Get all hinfo values
    queryParameters:			# none
    body:				# none
    responses:
      200:
        body:
	  description: List of all hinfo values
	  type: AdminHinfoId []
	  example: |
	    [
	      {
		XXX
	      }
	    ]

  post:
    description: Add a new hinfo
    queryParameters:			# none
    body:
      type: AdminHinfo		# without id
      example: |
	{
	  XXX
	}
    responses:
      200:
        body:
	  type: AdminHinfoId
	  example: |
	    {
	      XXX
	    }

  /{id}
    description: a particular hinfo

    put:
      description: update a hinfo
      body:
	type: AdminHinfo
	example: |
	  {
	    XXX
	  }
      responses:
        200:
          body:
	    type: AdminHinfoId
	    example: |
	      {
		XXX
	      }

    delete:
      description: delete an existing hinfo
      body:				# none
      responses:
        200:
          body:
	    type: text/plain
	    example: OK


/admin/dns.domain
  description: Collection of all domains

  get:
    description: Get all domains
    queryParameters:			# none
    body:				# none
    responses:
      200:
        body:
	  description: List of all domains
	  type: AdminDomainId []
	  example: |
	    [
	      {
		XXX
	      }
	    ]

  post:
    description: Add a new domain
    queryParameters:			# none
    body:
      type: AdminDomain		# without id
      example: |
	{
	  XXX
	}
    responses:
      200:
        body:
	  type: AdminDomainId
	  example: |
	    {
	      XXX
	    }

  /{id}
    description: a particular domain

    put:
      description: update a domain
      body:
	type: AdminDomain
	example: |
	  {
	    XXX
	  }
      responses:
        200:
          body:
	    type: AdminDomainId
	    example: |
	      {
		XXX
	      }

    delete:
      description: delete an existing domain
      body:				# none
      responses:
        200:
          body:
	    type: text/plain
	    example: OK


/admin/dns.dhcpprofile
  description: Collection of all DHCP profiles

  get:
    description: Get all DHCP profiles
    queryParameters:			# none
    body:				# none
    responses:
      200:
        body:
	  description: List of all DHCP profiles
	  type: AdminDHCPProfileId []
	  example: |
	    [
	      {
		XXX
	      }
	    ]

  post:
    description: Add a new DHCP profile
    queryParameters:			# none
    body:
      type: AdminDHCPProfile		# without id
      example: |
	{
	  XXX
	}
    responses:
      200:
        body:
	  type: AdminDHCPProfileId
	  example: |
	    {
	      XXX
	    }

  /{id}
    description: a particular DHCP profile

    put:
      description: update a DHCP profile
      body:
	type: AdminDHCPProfile
	example: |
	  {
	    XXX
	  }
      responses:
        200:
          body:
	    type: AdminDHCPProfileId
	    example: |
	      {
		XXX
	      }

    delete:
      description: delete an existing DHCP profile
      body:				# none
      responses:
        200:
          body:
	    type: text/plain
	    example: OK


/admin/dns.view
  description: Collection of all views

  get:
    description: Get all views
    queryParameters:			# none
    body:				# none
    responses:
      200:
        body:
	  description: List of all views
	  type: AdminViewId []
	  example: |
	    [
	      {
		XXX
	      }
	    ]

  post:
    description: Add a new view
    queryParameters:			# none
    body:
      type: AdminView		# without id
      example: |
	{
	  XXX
	}
    responses:
      200:
        body:
	  type: AdminViewId
	  example: |
	    {
	      XXX
	    }

  /{id}
    description: a particular view

    put:
      description: update a view
      body:
	type: AdminView
	example: |
	  {
	    XXX
	  }
      responses:
        200:
          body:
	    type: AdminViewId
	    example: |
	      {
		XXX
	      }

    delete:
      description: delete an existing view
      body:				# none
      responses:
        200:
          body:
	    type: text/plain
	    example: OK


/admin/dns.zone_forward
  description: Collection of all forward zones

  get:
    description: Get all forward zones
    queryParameters:			# none
    body:				# none
    responses:
      200:
        body:
	  description: List of all forward zones
	  type: AdminForwardZoneId []
	  example: |
	    [
	      {
		XXX
	      }
	    ]

  post:
    description: Add a new forward zone
    queryParameters:			# none
    body:
      type: AdminForwardZone		# without id
      example: |
	{
	  XXX
	}
    responses:
      200:
        body:
	  type: AdminForwardZoneId
	  example: |
	    {
	      XXX
	    }

  /{id}
    description: a particular forward zone

    put:
      description: update a forward zone
      body:
	type: AdminForwardZone
	example: |
	  {
	    XXX
	  }
      responses:
        200:
          body:
	    type: AdminForwardZoneId
	    example: |
	      {
		XXX
	      }

    delete:
      description: delete an existing forward zone
      body:				# none
      responses:
        200:
          body:
	    type: text/plain
	    example: OK


/admin/dns.zone_reverse4
  description: Collection of all reverse (IPv4) zones

  get:
    description: Get all reverse (IPv4) zones
    queryParameters:			# none
    body:				# none
    responses:
      200:
        body:
	  description: List of all reverse (IPv4) zones
	  type: AdminReverse4ZoneId []
	  example: |
	    [
	      {
		XXX
	      }
	    ]

  post:
    description: Add a new reverse (IPv4) zone
    queryParameters:			# none
    body:
      type: AdminReverse4Zone		# without id
      example: |
	{
	  XXX
	}
    responses:
      200:
        body:
	  type: AdminReverse4ZoneId
	  example: |
	    {
	      XXX
	    }

  /{id}
    description: a particular reverse (IPv4) zone

    put:
      description: update a reverse (IPv4) zone
      body:
	type: AdminReverse4Zone
	example: |
	  {
	    XXX
	  }
      responses:
        200:
          body:
	    type: AdminReverse4ZoneId
	    example: |
	      {
		XXX
	      }

    delete:
      description: delete an existing reverse (IPv4) zone
      body:				# none
      responses:
        200:
          body:
	    type: text/plain
	    example: OK


/admin/dns.zone_reverse6
  description: Collection of all reverse (IPv6) zones

  get:
    description: Get all reverse (IPv6) zones
    queryParameters:			# none
    body:				# none
    responses:
      200:
        body:
	  description: List of all reverse (IPv6) zones
	  type: AdminReverse6ZoneId []
	  example: |
	    [
	      {
		XXX
	      }
	    ]

  post:
    description: Add a new reverse (IPv6) zone
    queryParameters:			# none
    body:
      type: AdminReverse6Zone		# without id
      example: |
	{
	  XXX
	}
    responses:
      200:
        body:
	  type: AdminReverse6ZoneId
	  example: |
	    {
	      XXX
	    }

  /{id}
    description: a particular reverse (IPv6) zone

    put:
      description: update a reverse (IPv6) zone
      body:
	type: AdminReverse6Zone
	example: |
	  {
	    XXX
	  }
      responses:
        200:
          body:
	    type: AdminReverse6ZoneId
	    example: |
	      {
		XXX
	      }

    delete:
      description: delete an existing reverse (IPv6) zone
      body:				# none
      responses:
        200:
          body:
	    type: text/plain
	    example: OK


/admin/global.config
  description: Collection of config keys and values

  get:
    description: Get all config keys
    queryParameters:			# none
    body:				# none
    responses:
      200:
        body:
	  description: List of all config keys
	  type: AdminConfigKey []
	  example: |
	    [
	      {
		XXX
	      }
	    ]

  /{id}
    description: a particular configuration key

    put:
      description: update a configuration value given its key
      body:
	type: AdminConfig
	example: |
	  {
	    XXX
	  }
      responses:
        200:
          body:
	    type: AdminConfigKey
	    example: |
	      {
		XXX
	      }


/admin/global.nmuser
  description: Collection of all users

  get:
    description: Get all users
    queryParameters:
      idgrp:
        description: filter users in a group
        required: false
        default: get all users
    body:				# none
    responses:
      200:
        body:
	  description: List of all users
	  type: AdminUserId []
	  example: |
	    [
	      {
		idcor: 1
		login: foo
		present: 1
		idgrp: 1
	      }
	    ]

  post:
    description: Add a new user
    queryParameters:			# none
    body:
      type: AdminUser			# without id
      example: |
	{
	  login: foo
	  present: 1
	  idgrp: 1
	}
    responses:
      200:
        body:
	  type: AdminUserId
	  example: |
	    {
	      idcor: 1
	      login: foo
	      present: 1
	      idgrp: 1
	    }

  /{id}
    description: a particular user

    put:
      description: update a user
      body:
	type: AdminUser
	example: |
	  {
	    login: foo
	    present: 0
	    idgrp: 1
	  }
      responses:
        200:
          body:
	    type: AdminUserId
	    example: |
	      {
		idcor: 1
		login: foo
		present: 0
		idgrp: 1
	      }

    delete:
      description: delete an existing user
      body:				# none
      responses:
        200:
          body:
	    type: text/plain
	    example: OK


/admin/global.nmgroup
  description: Collection of all groups

  get:
    description: Get all groups
    queryParameters:			# none
    body:				# none
    responses:
      200:
        body:
	  description: List of all groups
	  type: AdminGroupId []
	  example: |
	    [
	      {
		idgrp: 1
		name: staff
		p_admin: 1
		p_smtp: 1
		p_ttl: 1
		p_mac: 1
		p_genl: 1
		p_genz: 1
	      }
	    ]

  post:
    description: Add a new group
    queryParameters:			# none
    body:
      type: AdminGroup			# without id
      example: |
	{
	  name: staff
	  p_admin: 1
	  p_smtp: 1
	  p_ttl: 1
	  p_mac: 1
	  p_genl: 1
	  p_genz: 1
	}
    responses:
      200:
        body:
	  type: AdminGroupId
	  example: |
	    {
	      idgrp: 1
	      name: staff
	      p_admin: 1
	      p_smtp: 1
	      p_ttl: 1
	      p_mac: 1
	      p_genl: 1
	      p_genz: 1
	    }

  /{id}
    description: a particular group

    put:
      description: update a group
      body:
	type: AdminGroup
	example: |
	  {
	    name: staff
	    p_admin: 1
	    p_smtp: 1
	    p_ttl: 0
	    p_mac: 1
	    p_genl: 1
	    p_genz: 1
	  }
      responses:
        200:
          body:
	    type: AdminGroupId
	    example: |
	      {
		idgrp: 1
		name: staff
		p_admin: 1
		p_smtp: 1
		p_ttl: 1
		p_mac: 1
		p_genl: 1
		p_genz: 1
	      }

    delete:
      description: delete an existing group
      body:				# none
      responses:
        200:
          body:
	    type: text/plain
	    example: OK


XXXXXXXXXXXXXXXXXXXXXXXX : pgauth.*


/admin/dns.p_ip
  description: Collection of all IP (v4 or v6) permissions

  get:
    description: Get all IP permissions
    queryParameters:			# none
    body:				# none
    responses:
      200:
        body:
	  description: List of all groups
	  type: AdminP_IpId []
	  example: |
	    [
	      {
		idgrp: 1
		perm: [
		  {
		    addr: 172.16.10.0/24
		    allow_deny: 1
		    idgrp: 1
		  }
		  {
		    addr: 172.16.10.254/31
		    allow_deny: 0
		    idgrp: 1
		  }
		]
	      }
	      {
		idgrp: 2
		perm: [
		  {
		    addr: 2001:db8:1234::/48
		    allow_deny: 1
		    idgrp: 2
		  }
		  {
		    addr: 2001:db8:1234::1/128
		    allow_deny: 0
		    idgrp: 2
		  }
		]
	      }
	    ]

  /{id}
    description: IP permissions for a group

    put:
      description: update IP permissions for a group
      body:
	type: AdminP_Ip []
	example: |
	  [
	    {
	      idgrp: 1
	      addr: 172.16.10.0/24
	      allow_deny: 1
	    }
	    {
	      addr: 172.16.10.254/31
	      allow_deny: 0
	      idgrp: 1
	    }
	  ]
      responses:
        200:
          body:
	    type: AdminP_IpId
	      {
		idgrp: 1
		perm: [
		  {
		    addr: 172.16.10.0/24
		    allow_deny: 1
		    idgrp: 1
		  }
		  {
		    addr: 172.16.10.254/31
		    allow_deny: 0
		    idgrp: 1
		  }
		]
	      }


/admin/dns.p_network
  description: Collection of all network permissions

  get:
    description: Get all network permissions
    queryParameters:
      idnet:
        description: filter permissions for a network
        required: false
        default: get permissions for all networks
    body:				# none
    responses:
      200:
        body:
	  description: List of all network permissions
	  type: AdminP_NetworkId []
	  example: |
	    [
	      {
		idgrp: 1
		perm: [
		  {
		    idgrp: 1
		    idnet: 1
		    sort: 100
		    acl: 0
		    dhcp: 1
		  }
		  {
		    idgrp: 1
		    idnet: 2
		    sort: 200
		    acl: 0
		    dhcp: 0
		  }
		]
	      }
	      {
		idgrp: 2
		perm: [
		  {
		    idgrp: 1
		    idnet: 3
		    sort: 200
		    acl: 0
		    dhcp: 0
		  }
		  {
		    idgrp: 1
		    idnet: 2
		    sort: 400
		    acl: 0
		    dhcp: 0
		  }
		]
	      }
	    ]

  /{id}
    description: network permissions for a group

    put:
      description: update network permissions for a group
      body:
	type: AdminP_Network []
	example: |
	  [
	    {
	      idgrp: 1
	      idnet: 1
	      sort: 100
	      acl: 0
	      dhcp: 1
	    }
	    {
	      idgrp: 1
	      idnet: 2
	      sort: 200
	      acl: 0
	      dhcp: 0
	    }
	  ]
      responses:
        200:
          body:
	    type: AdminP_NetworkId
	      {
		idgrp: 1
		perm: [
		  {
		    idgrp: 1
		    idnet: 1
		    sort: 100
		    acl: 0
		    dhcp: 1
		  }
		  {
		    idgrp: 1
		    idnet: 2
		    sort: 200
		    acl: 0
		    dhcp: 0
		  }
		]
	      }


/admin/dns.p_view
  description: Collection of all view permissions

  get:
    description: Get all view permissions
    queryParameters:
      idview:
        description: filter permissions for a view
        required: false
        default: get permissions for all views
    body:				# none
    responses:
      200:
        body:
	  description: List of all view permissions
	  type: AdminP_ViewId []
	  example: |
	    [
	      {
		idgrp: 1
		perm: [
		  {
		    idgrp: 1
		    idview: 1
		    sort: 100
		    selected: 1
		  }
		  {
		    idgrp: 1
		    idview: 2
		    sort: 200
		    selected: 0
		  }
		]
	      }
	      {
		idgrp: 2
		perm: [
		  {
		    idgrp: 2
		    idview: 1
		    sort: 100
		    selected: 1
		  }
		]
	      }
	    ]

  /{id}
    description: view permissions for a group

    put:
      description: update view permissions for a group
      body:
	type: AdminP_View []
	example: |
	  [
	    {
	      idgrp: 2
	      idview: 1
	      sort: 100
	      selected: 1
	    }
	  ]
      responses:
        200:
          body:
	    type: AdminP_ViewId
	      {
		idgrp: 2
		perm: [
		  {
		    idgrp: 2
		    idview: 1
		    sort: 100
		    selected: 1
		  }
		]
	      }

/admin/dns.p_dhcpprofile
  description: Collection of all DHCP profile permissions

  get:
    description: Get all DHCP profile permissions
    queryParameters:
      iddhcpprof:
        description: filter permissions for a DHCP profile
        required: false
        default: get permissions for all DHCP profiles
    body:				# none
    responses:
      200:
        body:
	  description: List of all DHCP profile permissions
	  type: AdminP_DHCPProfileId []
	  example: |
	    [
	      {
		idgrp: 1
		perm: [
		  {
		    idgrp: 1
		    iddhcpprof: 1
		    sort: 100
		  }
		  {
		    idgrp: 1
		    iddhcpprof: 2
		    sort: 200
		  }
		]
	      }
	      {
		idgrp: 2
		perm: [
		  {
		    idgrp: 2
		    iddhcpprof: 1
		    sort: 100
		  }
		]
	      }
	    ]

  /{id}
    description: DHCP profile permissions for a group

    put:
      description: update DHCP profile permissions for a group
      body:
	type: AdminP_DHCPProfile []
	example: |
	  [
	    {
	      idgrp: 2
	      iddhcpprof: 1
	      sort: 100
	    }
	  ]
      responses:
        200:
          body:
	    type: AdminP_DHCPProfileId
	      {
		idgrp: 2
		perm: [
		  {
		    idgrp: 2
		    iddhcpprof: 1
		    sort: 100
		  }
		]
	      }


/admin/dns.p_dom
  description: Collection of all domain permissions

  get:
    description: Get all domain permissions
    queryParameters:
      iddom:
        description: filter permissions for a domain
        required: false
        default: get permissions for all domains
    body:				# none
    responses:
      200:
        body:
	  description: List of all domain permissions
	  type: AdminP_DomId []
	  example: |
	    [
	      {
		idgrp: 1
		perm: [
		  {
		    idgrp: 1
		    iddom: 1
		    sort: 100
		    mailrole: 1
		  }
		  {
		    idgrp: 1
		    iddom: 2
		    sort: 200
		    mailrole: 0
		  }
		]
	      }
	      {
		idgrp: 2
		perm: [
		  {
		    idgrp: 2
		    iddom: 1
		    sort: 100
		    mailrole: 1
		  }
		]
	      }
	    ]

  /{id}
    description: domain permissions for a group

    put:
      description: update domain permissions for a group
      body:
	type: AdminP_Dom []
	example: |
	  [
	    {
	      idgrp: 2
	      iddom: 1
	      sort: 100
	      mailrole: 1
	    }
	  ]
      responses:
        200:
          body:
	    type: AdminP_DomId
	      {
		idgrp: 2
		perm: [
		  {
		    idgrp: 2
		    iddom: 1
		    sort: 100
		    mailrole: 1
		  }
		]
	      }









